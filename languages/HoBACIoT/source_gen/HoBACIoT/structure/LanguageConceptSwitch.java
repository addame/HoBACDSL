package HoBACIoT.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Action = 0;
  public static final int ActionType = 1;
  public static final int AllOf = 2;
  public static final int Allumer = 3;
  public static final int AnyOf = 4;
  public static final int Apply = 5;
  public static final int Aspirateur = 6;
  public static final int Attribute = 7;
  public static final int AttributeDesignator = 8;
  public static final int AttributeValue = 9;
  public static final int Attributes = 10;
  public static final int AuthorizationType = 11;
  public static final int Autorization = 12;
  public static final int Bathroom = 13;
  public static final int Bluetooth = 14;
  public static final int Condition = 15;
  public static final int Devices = 16;
  public static final int Enfants = 17;
  public static final int EntityType = 18;
  public static final int Environment = 19;
  public static final int EnvironmentType = 20;
  public static final int Eteindre = 21;
  public static final int Family = 22;
  public static final int Four = 23;
  public static final int Frigo = 24;
  public static final int GrandMaman = 25;
  public static final int GrandPapa = 26;
  public static final int GrandParents = 27;
  public static final int House = 28;
  public static final int Kitchen = 29;
  public static final int Maman = 30;
  public static final int Match = 31;
  public static final int MicrOnde = 32;
  public static final int Miror = 33;
  public static final int ObjectType = 34;
  public static final int Papa = 35;
  public static final int Parents = 36;
  public static final int Person = 37;
  public static final int Piece = 38;
  public static final int Policy = 39;
  public static final int PolicyCombiningAlgorithm = 40;
  public static final int PolicySet = 41;
  public static final int Prise = 42;
  public static final int Request = 43;
  public static final int Resource = 44;
  public static final int Response = 45;
  public static final int Result = 46;
  public static final int Room = 47;
  public static final int Rule = 48;
  public static final int RuleCombiningAlgorithm = 49;
  public static final int SalleReunion = 50;
  public static final int Salon = 51;
  public static final int SmartTap = 52;
  public static final int Smart_City = 53;
  public static final int Store = 54;
  public static final int Subject = 55;
  public static final int SubjectType = 56;
  public static final int TV = 57;
  public static final int Target = 58;
  public static final int Thermostat = 59;
  public static final int ToothBrush = 60;
  public static final int TournerAgauche = 61;
  public static final int TurnerAdroite = 62;
  public static final int Usager = 63;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xc51db5c4495f4e00L, 0xb88912a634a9acb3L);
    builder.put(0x36d641ea276bb406L, Action);
    builder.put(0x36d641ea276cb6f0L, ActionType);
    builder.put(0x36d641ea276d4f25L, AllOf);
    builder.put(0x653317703a46f0fcL, Allumer);
    builder.put(0x36d641ea276d479dL, AnyOf);
    builder.put(0x36d641ea276ba405L, Apply);
    builder.put(0x2dc58a2ba3746932L, Aspirateur);
    builder.put(0x7eb72ef0878e9710L, Attribute);
    builder.put(0x36d641ea276c516aL, AttributeDesignator);
    builder.put(0x36d641ea276c3402L, AttributeValue);
    builder.put(0x7eb72ef0878ea009L, Attributes);
    builder.put(0x6b1342531269bbf5L, AuthorizationType);
    builder.put(0x6b134253123ad142L, Autorization);
    builder.put(0x272a6c4fee938e7cL, Bathroom);
    builder.put(0x2dc58a2ba374692fL, Bluetooth);
    builder.put(0x6d82a07076a2e559L, Condition);
    builder.put(0x6b134253123a088dL, Devices);
    builder.put(0x2dc58a2ba3746901L, Enfants);
    builder.put(0x6b134253123adc47L, EntityType);
    builder.put(0x36d641ea276bc97cL, Environment);
    builder.put(0x36d641ea276cfab1L, EnvironmentType);
    builder.put(0x653317703a46f0feL, Eteindre);
    builder.put(0x2dc58a2ba37468fcL, Family);
    builder.put(0x2dc58a2ba3746927L, Four);
    builder.put(0x2dc58a2ba3746928L, Frigo);
    builder.put(0x2dc58a2ba3746910L, GrandMaman);
    builder.put(0x2dc58a2ba374690cL, GrandPapa);
    builder.put(0x2dc58a2ba3746900L, GrandParents);
    builder.put(0x272a6c4fee938e8bL, House);
    builder.put(0x272a6c4fee938e7fL, Kitchen);
    builder.put(0x2dc58a2ba3746909L, Maman);
    builder.put(0x36d641ea276d54beL, Match);
    builder.put(0x2dc58a2ba3746929L, MicrOnde);
    builder.put(0x2dc58a2ba374692cL, Miror);
    builder.put(0x36d641ea276cde66L, ObjectType);
    builder.put(0x2dc58a2ba3746905L, Papa);
    builder.put(0x2dc58a2ba37468ffL, Parents);
    builder.put(0x272a6c4fee938e8cL, Person);
    builder.put(0x272a6c4fee938e76L, Piece);
    builder.put(0x36d641ea276b7ddbL, Policy);
    builder.put(0x6d82a07076852807L, PolicyCombiningAlgorithm);
    builder.put(0x36d641ea276b77f4L, PolicySet);
    builder.put(0x2dc58a2ba3746931L, Prise);
    builder.put(0x7eb72ef0878e7db0L, Request);
    builder.put(0x36d641ea276baf08L, Resource);
    builder.put(0x7eb72ef0878e7e9bL, Response);
    builder.put(0x7eb72ef0878e8e66L, Result);
    builder.put(0x272a6c4fee938e7bL, Room);
    builder.put(0x36d641ea276b8152L, Rule);
    builder.put(0x6d82a07076850e2bL, RuleCombiningAlgorithm);
    builder.put(0x272a6c4fee938e7dL, SalleReunion);
    builder.put(0x272a6c4fee938e7eL, Salon);
    builder.put(0x2dc58a2ba374692aL, SmartTap);
    builder.put(0x272a6c4fee938e8aL, Smart_City);
    builder.put(0x2dc58a2ba374692dL, Store);
    builder.put(0x36d641ea276ba96bL, Subject);
    builder.put(0x36d641ea276c95dcL, SubjectType);
    builder.put(0x2dc58a2ba3746930L, TV);
    builder.put(0x36d641ea276b9907L, Target);
    builder.put(0x2dc58a2ba374692eL, Thermostat);
    builder.put(0x2dc58a2ba374692bL, ToothBrush);
    builder.put(0x653317703a46f0fdL, TournerAgauche);
    builder.put(0x653317703a46f0ffL, TurnerAdroite);
    builder.put(0x4254bfcda6748209L, Usager);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
