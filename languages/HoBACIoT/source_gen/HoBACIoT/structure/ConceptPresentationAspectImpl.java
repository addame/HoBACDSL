package HoBACIoT.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_ActionType;
  private ConceptPresentation props_AllOf;
  private ConceptPresentation props_Allumer;
  private ConceptPresentation props_AnyOf;
  private ConceptPresentation props_Apply;
  private ConceptPresentation props_Aspirateur;
  private ConceptPresentation props_AttributeDesignator;
  private ConceptPresentation props_AttributeValue;
  private ConceptPresentation props_Autorization;
  private ConceptPresentation props_Bluetooth;
  private ConceptPresentation props_Chambre;
  private ConceptPresentation props_Condition;
  private ConceptPresentation props_Cuisine;
  private ConceptPresentation props_Devices;
  private ConceptPresentation props_Enfants;
  private ConceptPresentation props_EntityType;
  private ConceptPresentation props_Environment;
  private ConceptPresentation props_EnvironmentType;
  private ConceptPresentation props_Eteindre;
  private ConceptPresentation props_Family;
  private ConceptPresentation props_Four;
  private ConceptPresentation props_Frigo;
  private ConceptPresentation props_GrandMaman;
  private ConceptPresentation props_GrandPapa;
  private ConceptPresentation props_GrandParents;
  private ConceptPresentation props_House;
  private ConceptPresentation props_Maman;
  private ConceptPresentation props_Match;
  private ConceptPresentation props_MicrOnde;
  private ConceptPresentation props_Miror;
  private ConceptPresentation props_ObjectType;
  private ConceptPresentation props_Papa;
  private ConceptPresentation props_Parents;
  private ConceptPresentation props_Person;
  private ConceptPresentation props_Piece;
  private ConceptPresentation props_Policy;
  private ConceptPresentation props_PolicyCombiningAlgorithm;
  private ConceptPresentation props_PolicySet;
  private ConceptPresentation props_Prise;
  private ConceptPresentation props_Resource;
  private ConceptPresentation props_Robinet;
  private ConceptPresentation props_Rule;
  private ConceptPresentation props_RuleCombiningAlgorithm;
  private ConceptPresentation props_SalleDeBain;
  private ConceptPresentation props_SalleReunion;
  private ConceptPresentation props_Salon;
  private ConceptPresentation props_Smart_City;
  private ConceptPresentation props_Store;
  private ConceptPresentation props_Subject;
  private ConceptPresentation props_SubjectType;
  private ConceptPresentation props_TV;
  private ConceptPresentation props_Target;
  private ConceptPresentation props_Thermostat;
  private ConceptPresentation props_ToothBrush;
  private ConceptPresentation props_TournerAgauche;
  private ConceptPresentation props_TurnerAdroite;
  private ConceptPresentation props_Usager;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.ActionType:
        if (props_ActionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ActionType = cpb.create();
        }
        return props_ActionType;
      case LanguageConceptSwitch.AllOf:
        if (props_AllOf == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AllOf = cpb.create();
        }
        return props_AllOf;
      case LanguageConceptSwitch.Allumer:
        if (props_Allumer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Allumer");
          props_Allumer = cpb.create();
        }
        return props_Allumer;
      case LanguageConceptSwitch.AnyOf:
        if (props_AnyOf == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AnyOf = cpb.create();
        }
        return props_AnyOf;
      case LanguageConceptSwitch.Apply:
        if (props_Apply == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Apply = cpb.create();
        }
        return props_Apply;
      case LanguageConceptSwitch.Aspirateur:
        if (props_Aspirateur == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Aspirateur = cpb.create();
        }
        return props_Aspirateur;
      case LanguageConceptSwitch.AttributeDesignator:
        if (props_AttributeDesignator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AttributeDesignator = cpb.create();
        }
        return props_AttributeDesignator;
      case LanguageConceptSwitch.AttributeValue:
        if (props_AttributeValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AttributeValue = cpb.create();
        }
        return props_AttributeValue;
      case LanguageConceptSwitch.Autorization:
        if (props_Autorization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Autorization = cpb.create();
        }
        return props_Autorization;
      case LanguageConceptSwitch.Bluetooth:
        if (props_Bluetooth == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Bluetooth = cpb.create();
        }
        return props_Bluetooth;
      case LanguageConceptSwitch.Chambre:
        if (props_Chambre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Chambre = cpb.create();
        }
        return props_Chambre;
      case LanguageConceptSwitch.Condition:
        if (props_Condition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Condition");
          props_Condition = cpb.create();
        }
        return props_Condition;
      case LanguageConceptSwitch.Cuisine:
        if (props_Cuisine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Cuisine = cpb.create();
        }
        return props_Cuisine;
      case LanguageConceptSwitch.Devices:
        if (props_Devices == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Devices = cpb.create();
        }
        return props_Devices;
      case LanguageConceptSwitch.Enfants:
        if (props_Enfants == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Enfants = cpb.create();
        }
        return props_Enfants;
      case LanguageConceptSwitch.EntityType:
        if (props_EntityType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EntityType = cpb.create();
        }
        return props_EntityType;
      case LanguageConceptSwitch.Environment:
        if (props_Environment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Environment = cpb.create();
        }
        return props_Environment;
      case LanguageConceptSwitch.EnvironmentType:
        if (props_EnvironmentType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnvironmentType = cpb.create();
        }
        return props_EnvironmentType;
      case LanguageConceptSwitch.Eteindre:
        if (props_Eteindre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Eteindre");
          props_Eteindre = cpb.create();
        }
        return props_Eteindre;
      case LanguageConceptSwitch.Family:
        if (props_Family == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Family = cpb.create();
        }
        return props_Family;
      case LanguageConceptSwitch.Four:
        if (props_Four == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Four = cpb.create();
        }
        return props_Four;
      case LanguageConceptSwitch.Frigo:
        if (props_Frigo == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Frigo = cpb.create();
        }
        return props_Frigo;
      case LanguageConceptSwitch.GrandMaman:
        if (props_GrandMaman == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GrandMaman = cpb.create();
        }
        return props_GrandMaman;
      case LanguageConceptSwitch.GrandPapa:
        if (props_GrandPapa == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GrandPapa = cpb.create();
        }
        return props_GrandPapa;
      case LanguageConceptSwitch.GrandParents:
        if (props_GrandParents == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GrandParents");
          props_GrandParents = cpb.create();
        }
        return props_GrandParents;
      case LanguageConceptSwitch.House:
        if (props_House == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_House = cpb.create();
        }
        return props_House;
      case LanguageConceptSwitch.Maman:
        if (props_Maman == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Maman = cpb.create();
        }
        return props_Maman;
      case LanguageConceptSwitch.Match:
        if (props_Match == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Match = cpb.create();
        }
        return props_Match;
      case LanguageConceptSwitch.MicrOnde:
        if (props_MicrOnde == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MicrOnde = cpb.create();
        }
        return props_MicrOnde;
      case LanguageConceptSwitch.Miror:
        if (props_Miror == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Miror = cpb.create();
        }
        return props_Miror;
      case LanguageConceptSwitch.ObjectType:
        if (props_ObjectType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ObjectType = cpb.create();
        }
        return props_ObjectType;
      case LanguageConceptSwitch.Papa:
        if (props_Papa == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Papa = cpb.create();
        }
        return props_Papa;
      case LanguageConceptSwitch.Parents:
        if (props_Parents == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Parents = cpb.create();
        }
        return props_Parents;
      case LanguageConceptSwitch.Person:
        if (props_Person == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Person = cpb.create();
        }
        return props_Person;
      case LanguageConceptSwitch.Piece:
        if (props_Piece == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Piece = cpb.create();
        }
        return props_Piece;
      case LanguageConceptSwitch.Policy:
        if (props_Policy == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Policy = cpb.create();
        }
        return props_Policy;
      case LanguageConceptSwitch.PolicyCombiningAlgorithm:
        if (props_PolicyCombiningAlgorithm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PolicyCombiningAlgorithm");
          props_PolicyCombiningAlgorithm = cpb.create();
        }
        return props_PolicyCombiningAlgorithm;
      case LanguageConceptSwitch.PolicySet:
        if (props_PolicySet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PolicySet = cpb.create();
        }
        return props_PolicySet;
      case LanguageConceptSwitch.Prise:
        if (props_Prise == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Prise = cpb.create();
        }
        return props_Prise;
      case LanguageConceptSwitch.Resource:
        if (props_Resource == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Resource = cpb.create();
        }
        return props_Resource;
      case LanguageConceptSwitch.Robinet:
        if (props_Robinet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Robinet = cpb.create();
        }
        return props_Robinet;
      case LanguageConceptSwitch.Rule:
        if (props_Rule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Rule = cpb.create();
        }
        return props_Rule;
      case LanguageConceptSwitch.RuleCombiningAlgorithm:
        if (props_RuleCombiningAlgorithm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RuleCombiningAlgorithm");
          props_RuleCombiningAlgorithm = cpb.create();
        }
        return props_RuleCombiningAlgorithm;
      case LanguageConceptSwitch.SalleDeBain:
        if (props_SalleDeBain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SalleDeBain = cpb.create();
        }
        return props_SalleDeBain;
      case LanguageConceptSwitch.SalleReunion:
        if (props_SalleReunion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SalleReunion = cpb.create();
        }
        return props_SalleReunion;
      case LanguageConceptSwitch.Salon:
        if (props_Salon == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Salon = cpb.create();
        }
        return props_Salon;
      case LanguageConceptSwitch.Smart_City:
        if (props_Smart_City == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Smart_City");
          props_Smart_City = cpb.create();
        }
        return props_Smart_City;
      case LanguageConceptSwitch.Store:
        if (props_Store == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Store = cpb.create();
        }
        return props_Store;
      case LanguageConceptSwitch.Subject:
        if (props_Subject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Subject = cpb.create();
        }
        return props_Subject;
      case LanguageConceptSwitch.SubjectType:
        if (props_SubjectType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SubjectType = cpb.create();
        }
        return props_SubjectType;
      case LanguageConceptSwitch.TV:
        if (props_TV == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TV = cpb.create();
        }
        return props_TV;
      case LanguageConceptSwitch.Target:
        if (props_Target == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Target = cpb.create();
        }
        return props_Target;
      case LanguageConceptSwitch.Thermostat:
        if (props_Thermostat == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Thermostat = cpb.create();
        }
        return props_Thermostat;
      case LanguageConceptSwitch.ToothBrush:
        if (props_ToothBrush == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ToothBrush = cpb.create();
        }
        return props_ToothBrush;
      case LanguageConceptSwitch.TournerAgauche:
        if (props_TournerAgauche == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TournerAgauche");
          props_TournerAgauche = cpb.create();
        }
        return props_TournerAgauche;
      case LanguageConceptSwitch.TurnerAdroite:
        if (props_TurnerAdroite == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TurnerAdroite");
          props_TurnerAdroite = cpb.create();
        }
        return props_TurnerAdroite;
      case LanguageConceptSwitch.Usager:
        if (props_Usager == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Usager");
          props_Usager = cpb.create();
        }
        return props_Usager;
    }
    return null;
  }
}
