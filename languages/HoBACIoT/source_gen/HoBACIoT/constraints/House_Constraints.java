package HoBACIoT.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class House_Constraints extends BaseConstraintsDescriptor {
  public House_Constraints() {
    super(CONCEPTS.House$Ke);
  }

  public static class EnergyConsomSeuil_Property extends BasePropertyConstraintsDescriptor {
    public EnergyConsomSeuil_Property(ConstraintsDescriptor container) {
      super(PROPS.EnergyConsomSeuil$TI1f, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castInteger(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:cbb3d6d9-c3f4-4bd1-9485-670730770fab(HoBACIoT.constraints)", "7715583511171381659"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, int propertyValue) {
      SPropertyOperations.assign(node, PROPS.energyConsom$njrL, SPropertyOperations.getInteger(node, PROPS.temperature$LARk));
      if (SPropertyOperations.getInteger(node, PROPS.energyConsom$njrL) <= propertyValue) {
        return true;
      }
      return false;
    }
  }
  public static class Temperature_Property extends BasePropertyConstraintsDescriptor {
    public Temperature_Property(ConstraintsDescriptor container) {
      super(PROPS.temperature$LARk, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castInteger(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:cbb3d6d9-c3f4-4bd1-9485-670730770fab(HoBACIoT.constraints)", "7715583511171459852"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, int propertyValue) {
      if (propertyValue >= 0 && propertyValue <= 40) {
        return true;
      }
      return false;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.EnergyConsomSeuil$TI1f, new EnergyConsomSeuil_Property(this));
    properties.put(PROPS.temperature$LARk, new Temperature_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept House$Ke = MetaAdapterFactory.getConcept(0xc51db5c4495f4e00L, 0xb88912a634a9acb3L, 0x272a6c4fee938e8bL, "HoBACIoT.structure.House");
  }

  private static final class PROPS {
    /*package*/ static final SProperty EnergyConsomSeuil$TI1f = MetaAdapterFactory.getProperty(0xc51db5c4495f4e00L, 0xb88912a634a9acb3L, 0x272a6c4fee938e8bL, 0x6b134253123b0191L, "EnergyConsomSeuil");
    /*package*/ static final SProperty energyConsom$njrL = MetaAdapterFactory.getProperty(0xc51db5c4495f4e00L, 0xb88912a634a9acb3L, 0x272a6c4fee938e8bL, 0x6b134253123afee9L, "energyConsom");
    /*package*/ static final SProperty temperature$LARk = MetaAdapterFactory.getProperty(0xc51db5c4495f4e00L, 0xb88912a634a9acb3L, 0x272a6c4fee938e8bL, 0x6b134253123afbf5L, "temperature");
  }
}
